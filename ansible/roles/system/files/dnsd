#!/bin/sh
# Author: Johnson.Lee
# Project: EWNUL0 (Nimbus)
# Purpose:
#   For DNS server service.
#
# History:
# 2012/07/09 - First version
# 2012/07/11 - Turn off upstream dns if no sta mode
# 2012/08/27 - Added nimbus.sandisk.com for 192.168.1.1
# 2013/03/20 - fixed script failure when SSID included space.
# 2013/09/25 - revised default DNS name to 'mediadrive.sandisk.com'
# 2013/10/07 - csv name change to db.mediadrive to avoid can't open sandisk web site
# 2015/11/08 - UPDATES FOR KA LITE (Jamie Alexandre). Changes marked with "KA-LITE-MOD"

. /opt/qsi/config/nimbus.conf
. /opt/qsi/config/develop.conf
. /opt/qsi/config/platform_functions
. /opt/qsi/config/config_cmd

IW="/usr/sbin/iw"
HOSTAPD_CLI="/usr/local/bin/hostapd_cli"
DNSD="/usr/local/sbin/maradns"
DNSD_CFG="/tmp/mararc"
DNSD_OPT=" -f $DNSD_CFG"
DB_LOCATION="/etc/maradns"
DB_FILENAME="db.mediadrive"

LOCAL_IF="127.0.0.1"
WIFIAP_SSID=""

check_if_station_work() {
#       echo -n "       check sta link to:"
        LINK=`$IW $WLAN_STA link | grep SSID | cut -d ':' -f 2`
#       echo "LINK=($LINK)"
        if [ -z "$LINK" ]
        then
        return 0
        else
        return 1
        fi
    
    return 0
}

wlan_get_ap_ssid()
{
    SSID=`$HOSTAPD_CLI -i $WLAN_AP get_config 2>/dev/null | grep ^ssid | cut -d '=' -f 2`
    NIMBUS_DEBUG "AP SSID: ($SSID)"
    if [ ! -z "$SSID" ]
    then
        WIFIAP_SSID=$SSID
    fi
}

wlan_make_config_dnsd() {
    if [ ! -z "$WIFIAP_SSID" ] || [ -f "$DB_LOCATION/$DB_FILENAME" ]
        then
                rm -rf "$DB_LOCATION/$DB_FILENAME"
        #echo "" >  $DB_LOCATION/$DB_FILENAME
        fi
        # KA-LITE-MOD start
        echo 'mediadrive.sandisk.com.   A  192.168.11.1 ~ ' >  $DB_LOCATION/$DB_FILENAME
        echo 'ka.lite.                  A  192.168.11.1 ~ ' >> $DB_LOCATION/$DB_FILENAME
        echo 'ka.light.                 A  192.168.11.1 ~ ' >> $DB_LOCATION/$DB_FILENAME
        echo 'kalite.com.               A  192.168.11.1 ~ ' >> $DB_LOCATION/$DB_FILENAME
        echo 'kalite.                   A  192.168.11.1 ~ ' >> $DB_LOCATION/$DB_FILENAME
        echo 'kalite.local.             A  192.168.11.1 ~ ' >> $DB_LOCATION/$DB_FILENAME
        echo 'kalite.net.               A  192.168.11.1 ~ ' >> $DB_LOCATION/$DB_FILENAME
        # KA-LITE-MOD end

    if [ -f "$DNSD_CFG" ]
        then
                rm -rf "$DNSD_CFG" 
        fi

    cat "$TEMPLATE_DNSD" > $DNSD_CFG

    #ipv4_bind_addresses="127.0.0.1,192.168.1.1"
    # KA-LITE-MOD
    sed -i "s/^ipv4_bind_addresses.*/ipv4_bind_addresses=\"$WLAN_IP\"/g" $DNSD_CFG

    #recursive_acl="192.168.1.0/24,127.0.0.1"
    sed -i "s/^recursive_acl.*/recursive_acl=\"$WLAN_IP\/24,$LOCAL_IF\"/g" $DNSD_CFG

    # for upstrem_server
    check_if_station_work
    if [ $? -eq 0 ]
    then
        #upstream_servers["."]="192.168.0.1, 192.168.0.2"
        # KA-LITE-MOD
        sed -i "s/^upstream_servers\[.*/upstream_servers\[\"\.\"\]=\"$LOCAL_IF\"/g" $DNSD_CFG
    else
        DNS_LIST=`cat /etc/resolv.conf | grep nameserver | cut -d ' ' -f 2`
        DNS_STR=""
        for dns in $DNS_LIST
        do
            if [ ! -z "$DNS_STR" ]            
            then
                DNS_STR="$DNS_STR,"
            fi
            DNS_STR="$DNS_STR $dns"
        done
        #echo "DNS_STR=$DNS_STR"
        # KA-LITE-MOD
        sed -i "s/^upstream_servers\[.*/upstream_servers\[\"\.\"\]=\"$DNS_STR, $LOCAL_IF\"/g" $DNSD_CFG
    fi

}

wlan_start_dnsd() {

    AP_ID=`pidof $(basename $DNSD)`
    if [ -z "$AP_ID" ]
    then
        wlan_make_config_dnsd
        $DNSD $DNSD_OPT &  2>/dev/null
    fi
}

case "$1" in

        start)
        wlan_get_ap_ssid
        if [ -z "$WIFIAP_SSID" ]
        then
            echo "DNSD: No AP is active!"
            exit 0
        fi
                echo "Start DNSD service..." 
                ID=`pidof maradns`
                if [ ! -z "$ID" ]
                then
                        echo "  Service already run!"
                else
                        wlan_make_config_dnsd
                        wlan_start_dnsd
                fi
                ;;

        stop)
                echo "Stopping DNSD service..."
                for daemon in maradns
                do 
                        ID=`pidof $daemon`
                        #echo "ID=($ID) , deamon=$daemon"
                        if [ ! -z "$ID" ]
                        then
                                echo -n "       STOP [$daemon] ($ID)..."
                                killall $daemon 2>/dev/null
                                if [ $? -eq 0 ]
                                then
                                        echo "[DONE]."
                                else
                                        echo "[FAIL]."
                                fi
                        fi
                done
                ;;

        restart)
                $0 stop
                sleep 1
                $0 start
                ;;

        *)
                echo "Usage: $0 (start|stop|restart) "
                exit 1
                ;;
esac

exit 0

